import pandas as pd
import numpy as np

print("=" * 50)
print("ШАГ 1: Загрузка и первичный осмотр данных")
print("=" * 50)

try:
    df = pd.read_csv('ncr_ride_bookings.csv')
    print("Файл 'ncr_ride_bookings.csv' загружен успешно!")
except FileNotFoundError:
        print("ОШИБКА: Файл не найден!")
        exit()
#Мы показываем 5 строк данных чтобы понять структуру
print("\n1. Первые 5 строк данных:")
print(df.head())
print("\n" + "-"*30)
#Показывем количество записей, пропуски и количество столбцов
print("2. Общая информация о данных:")
df.info()
print("\n" + "-"*30)
#Статистика числоых столбцов:среднее, минимальные и макисмальные
print("3. Статистическое описание числовых столбцов:")
print(df.describe())
print("\n" + "-"*30)
#Сколько строк и столбцов
print("4. Количество строк и столбцов:")
print(f"Строк: {df.shape[0]}, Столбцов: {df.shape[1]}")
print("\n" + "-"*30)
#Все названия столбцов
print("ВСЕ СТОЛБЦЫ В ДАННЫХ:")
for i, col in enumerate(df.columns, 1):
    print(f"{i}. {col}")

print("\n" + "-"*30)


print("=" * 50)
print("ШАГ 2: СТАТИСТИЧЕСКИЙ ОБЗОР ДАННЫХ")
print("=" * 50)

print("1. Количество пропущенных значений в каждом столбце:")
missing_values = df.isnull().sum()#Считаем количество пропусков (NaN)
missing_percentage = (df.isnull().sum() / len(df)) * 100#Процент пропусков
missing_info = pd.DataFrame({
    'Пропущенные значения': missing_values,
    'Процент пропусков': missing_percentage.round(2)
})#Создание красивую таблицу
print(missing_info)
print("\n" + "-"*30)

print("2. Общая статистика по пропущенным значениям:")
print(f"Всего пропущенных значений в датасете: {df.isnull().sum().sum()}")
print(f"Столбцов с пропусками: {(missing_values > 0).sum()} из {len(df.columns)}")
print("\n" + "-"*30)

print("3. Типы данных в каждом столбце:")
dtypes_info = pd.DataFrame({
    'Тип данных': df.dtypes,
    'Уникальных значений': df.nunique()
})
print(dtypes_info)
print("\n" + "-"*30)

#Список всех всех названий столбцов
all_columns = df.columns.tolist()
status_cols = [col for col in all_columns if 'status' in col.lower()]#Статусы
#Типы трансорта
vehicle_cols = [col for col in all_columns if 'vehicle' in col.lower() or 'auto' in col.lower()]

status_col = status_cols[0] if status_cols else 'Booking Status'
vehicle_col = vehicle_cols[0] if vehicle_cols else 'Vehicle Type'

print("4. Анализ категориальных столбцов:")

if status_col in df.columns:
    print(f"\nУникальные значения в '{status_col}':")#Все значения и их чистоту
    print(df[status_col].value_counts())
    print(f"Всего уникальных статусов: {df[status_col].nunique()}")#Уникальные значение считаем
    print(f"Пропущенных значений: {df[status_col].isnull().sum()}")#Считаем пропуски в этом столбце
else:
    print(f"Столбец '{status_col}' не найден в данных")

if vehicle_col in df.columns:
    print(f"\nУникальные значения в '{vehicle_col}':")
    print(df[vehicle_col].value_counts())
    print(f"Всего уникальных типов транспорта: {df[vehicle_col].nunique()}")
    print(f"Пропущенных значений: {df[vehicle_col].isnull().sum()}")
else:
    print(f"Столбец '{vehicle_col}' не найден в данных")

print("\n" + "-"*30)

print("5. Базовая статистика для числовых столбцов:")
numeric_columns = df.select_dtypes(include=[np.number]).columns #Выбираем только числовые столбцы
if len(numeric_columns) > 0:
    #Показываем статистику для числовых столбцов
    numeric_stats = df[numeric_columns].describe()
    print(numeric_stats)
else:
    print("Числовые столбцы не найдены")

print("\n" + "-"*30)


print("=" * 50)
print("ШАГ 3: Выборка и фильтрация данных")
print("=" * 50)

# Ищем столбец с ID бронирования (содержит 'booking' и 'id')
booking_id_cols = [col for col in all_columns if 'booking' in col.lower() and 'id' in col.lower()]
# Ищем столбцы с датой/временем (содержат 'date', 'time' или 'datetime')
datetime_cols = [col for col in all_columns if any(x in col.lower() for x in ['date', 'time', 'datetime'])]
# Ищем столбцы с оплатой (содержат 'payment')
payment_cols = [col for col in all_columns if 'payment' in col.lower()]
# Ищем столбцы со стоимостью (содержат 'value', 'price' или 'cost')
value_cols = [col for col in all_columns if 'value' in col.lower() or 'price' in col.lower() or 'cost' in col.lower()]

print(f"Возможные столбцы для Booking ID: {booking_id_cols}")
print(f"Возможные столбцы для даты/времени: {datetime_cols}")
print(f"Возможные столбцы для статуса: {status_cols}")
print(f"Возможные столбцы для типа транспорта: {vehicle_cols}")
print(f"Возможные столбцы для оплаты: {payment_cols}")
print(f"Возможные столбцы для стоимости: {value_cols}")
# ВЫБИРАЕМ СТОЛБЦЫ ДЛЯ РАБОТЫ:
booking_id_col = booking_id_cols[0] if booking_id_cols else 'Booking ID'
datetime_col = datetime_cols[0] if datetime_cols else 'booking_datetime'
payment_col = payment_cols[0] if payment_cols else 'Payment Method'
value_col = value_cols[0] if value_cols else 'Booking Value'
# ПОКАЗЫВАЕМ КАКИЕ СТОЛБЦЫ БУДЕМ ИСПОЛЬЗОВАТЬ:
print(f"\nИспользуем столбцы:")
print(f"Booking ID: {booking_id_col}")
print(f"Дата/время: {datetime_col}")
print(f"Статус: {status_col}")
print(f"Тип транспорта: {vehicle_col}")
print(f"Оплата: {payment_col}")
print(f"Стоимость: {value_col}")

print("\n" + "-"*30)

print("1. Выбранные столбцы (первые 5 строк):")
try:
    # Выбираем только нужные столбцы для показа
    selected_columns = df[[booking_id_col, datetime_col, status_col, vehicle_col, payment_col]]
    print(selected_columns.head())
except KeyError as e:
    # Если какой-то столбец не найден - сообщаем об ошибке
    print(f"Ошибка: столбец {e} не найден. Проверьте названия столбцов.")

print("\n" + "-"*30)
# Фильтруем данные: только строки где статус = 'Cancelled by Driver'
print("2. Бронирования со статусом 'Cancelled by Driver':")
try:
    cancelled_by_driver = df[df[status_col] == 'Cancelled by Driver']
    print(cancelled_by_driver)# показываем результат
    print(f"Найдено: {len(cancelled_by_driver)} записей")#считаем
except KeyError:
    print("Столбец статуса не найден")

print("\n" + "-"*30)
# Двойное условие: тип транспорта = Auto И стоимость > 500
print("3. Бронирования Auto с Booking Value > 500:")
try:
    auto_high_value = df[(df[vehicle_col] == 'Auto') & (df[value_col] > 500)]
    print(auto_high_value)
    print(f"Найдено: {len(auto_high_value)} записей")
except KeyError:
    print("Не удалось выполнить фильтрацию. Проверьте названия столбцов.")

print("\n" + "-"*30)

print("4. Бронирования за март 2024 года:")
try:
    # Преобразуем текст в формат даты для работы с датами
    df[datetime_col] = pd.to_datetime(df[datetime_col])
    march_2024 = df[(df[datetime_col] >= '2024-03-01') & (df[datetime_col] <= '2024-03-31')]
    print(march_2024)
    print(f"Найдено: {len(march_2024)} записей")
except KeyError:
    print("Столбец с датой не найден")
except Exception as e:
    print(f"Ошибка при работе с датами: {e}")

print("=" * 50)
print("АНАЛИЗ ЗАВЕРШЕН!")
print("=" * 50)
              
